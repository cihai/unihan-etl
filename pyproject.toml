[tool.black]
skip-string-normalization = true

[tool.poetry]
name = "unihan-etl"
version = "0.11.0"
description = "Export UNIHAN to Python, Data Package, CSV, JSON and YAML"
license = "MIT"
authors = ["Tony Narlock <tony@git-pull.com>"]

classifiers = [
  'Development Status :: 4 - Beta',
  "License :: OSI Approved :: MIT License",
  'Environment :: Web Environment',
  'Intended Audience :: Developers',
  'Programming Language :: Python',
  'Programming Language :: Python :: 2.7',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.5',
  'Programming Language :: Python :: 3.6',
  'Programming Language :: Python :: Implementation :: PyPy',
  "Topic :: Utilities",
  "Topic :: Software Development :: Internationalization"
]
keywords = ["unihan", "sqlalchemy", "cjk", "yaml", "json"]

readme = 'README.rst'
packages = [
    { include = "unihan_etl" }
]

homepage = "https://unihan-etl.git-pull.com"

[tool.poetry.scripts]
unihan-etl = 'unihan_etl.__main__:run'

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/cihai/unihan-etl/issues"
Documentation = "https://unihan-etl.git-pull.com"
Repository = "https://github.com/cihai/unihan-etl"

[tool.poetry.dependencies]
python = "~2.7 || ^3.5"
unicodecsv = "*"
appdirs = "*"
zhon = "*"

[tool.poetry.dev-dependencies]
### Docs ###
sphinx = [
  {version="<2", python="<3"},
  {version="*", python=">=3"}
]
alagitpull = {version = "^0.1.0"}
sphinx-issues = {version = "^1.2.0"}
sphinx-argparse = {version = "^0.2.5"}

### Testing ###
pytest = [
  {version="<4.7.0", python="<3"},
  {version="*", python=">=3"}
]
pathlib2 = {version="<2.3.5", python="<3"}  # Untangle pytest peer-dependency
pytest-rerunfailures = "*"

### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = [
  {version="<2.10.0", python="<3"},
  {version="*", python=">=3"}
]

### Format ###
black = {version="==19.10b0", python="^3.6"}
isort = [
  {version="<5", python="<3.6"},
  {version="*", python=">=3.6"}
]

### Lint ###
flake8 = "*"

[tool.poetry.extras]
docs = ["sphinx", "sphinx-issues", "sphinx-argparse", "alagitpull"]
test = ["pytest", "pathlib2", "pytest-rerunfailures"]
coverage = ["codecov", "coverage", "pytest-cov"]
format = ["black", "isort"]
lint = ["flake8"]
